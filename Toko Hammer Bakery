#include <iostream>
#include <vector>
#include <string>
#include <stack>
#include <queue>
#include <algorithm>
#include <sstream>
#include <iomanip>
#include <conio.h>
#include <windows.h>

using namespace std;

// Kelas untuk menyimpan informasi pengguna
class User {
private:
    string username;
    string password;
public:
    User(string u, string p) : username(u), password(p) {}

    string getUsername() const {
        return username;
    }

    string getPassword() const {
        return password;
    }

    bool checkPassword(string p) const {
        return password == p;
    }

    bool operator<(const User& other) const {
        return username < other.username;
    }
};

// Kelas template untuk menyimpan informasi kue
template <typename T>
class Cake {
private:
    string name;
    T price;
    string description;
public:
    Cake(string n, T p, string d) : name(n), price(p), description(d) {}

    string getName() const {
        return name;
    }

    T getPrice() const {
        return price;
    }

    string getDescription() const {
        return description;
    }

    void printCake(size_t nameWidth, size_t priceWidth, size_t descWidth) const {
        cout << "| " << setw(nameWidth) << left << name << " | Rp" << setw(priceWidth) << left << price << " | " << setw(descWidth) << left << description << " |" << endl;
    }
};

// Fungsi untuk menampilkan menu awal
void displayInitialMenu() {
    system("cls");
    cout << "==========================================" << endl;
    cout << "               MENU AWAL                 " << endl;
    cout << "==========================================" << endl;
    cout << "| 1. Daftar Akun                         |" << endl;
    cout << "| 2. Masuk                               |" << endl;
    cout << "| 3. Keluar                              |" << endl;
    cout << "==========================================" << endl;
    cout << "\nMasukkan Pilihan: ";
}

// Fungsi untuk menampilkan menu utama setelah login
void displayMainMenu() {
    system("cls");
    cout << "==========================================" << endl;
    cout << "               MENU UTAMA                " << endl;
    cout << "==========================================" << endl;
    cout << "| 1. Lihat Katalog Kue                   |" << endl;
    cout << "| 2. Sesuaikan dan Pesan Kue             |" << endl;
    cout << "| 3. Keluar                              |" << endl;
    cout << "==========================================" << endl;
    cout << "\nMasukkan Pilihan: ";
}

// Fungsi untuk mencari pengguna dengan divide and conquer
int binarySearch(vector<User>& users, string username, int low, int high) {
    if (high < low)
        return -1;

    int mid = (low + high) / 2;

    if (users[mid].getUsername() == username)
        return mid;
    else if (users[mid].getUsername() > username)
        return binarySearch(users, username, low, mid - 1);
    else
        return binarySearch(users, username, mid + 1, high);
}

// Fungsi untuk menampilkan antrean
void displayOrders(queue<string> orders) {
    system("cls");
    cout << "Daftar pesanan saat ini:" << endl;
    cout << "=========================" << endl;
    if (!orders.empty()) {
        while (!orders.empty()) {
            cout << ">> [" << orders.front() << "]" << "\n";
            orders.pop();
        }
    } else {
        cout << "======Pesanan saat ini kosong======" << endl;
    }
    cout << "\n";
    getch();
}

void displayCakeCatalog(const vector<Cake<double>>& cakes) {
    system("cls");
    
    size_t nameWidth = 15;
    size_t priceWidth = 7;
    size_t descWidth = 30;

    // Menghitung lebar kolom yang dibutuhkan
    for (const auto& cake : cakes) {
        nameWidth = max(nameWidth, cake.getName().length());
        stringstream priceStream;
        priceStream << fixed << setprecision(0) << cake.getPrice();
        priceWidth = max(priceWidth, priceStream.str().length());
        descWidth = max(descWidth, cake.getDescription().length());
    }

    string separator = "+-" + string(nameWidth, '-') + "-+-" + string(priceWidth + 2, '-') + "-+-" + string(descWidth, '-') + "-+";

    cout << separator << endl;
    cout << "| " << setw(nameWidth) << left << "Nama" << " | " << setw(priceWidth) << left << "Harga" << "   | " << setw(descWidth) << left << "Deskripsi" << " |" << endl;
    cout << separator << endl;
    for (const auto& cake : cakes) {
        cake.printCake(nameWidth, priceWidth, descWidth);
    }
    cout << separator << endl;
    getch();
}

int main() {
    vector<User> users = {User("hafiz", "1"), User("irvandi", "1"), User("yoel", "1")};
    vector<Cake<double>> cakes;
    cakes.push_back(Cake<double>("Kue Coklat", 10000.0, "Kue coklat yang lezat"));
    cakes.push_back(Cake<double>("Kue Vanila", 12000.0, "Kue vanila yang enak"));
    cakes.push_back(Cake<double>("Kue Red Velvet", 15000.0, "Kue red velvet yang menggugah selera"));

    queue<string> orders;
    stack<string> receipts;
    string username, password;
    bool loggedIn = false;
    int choice;

    do {
        if (!loggedIn) {
            displayInitialMenu();
        } else {
            displayMainMenu();
        }
        cin >> choice;

        if (!loggedIn) {
    switch (choice) {
        case 1: { // Daftar
            system("cls");
            cout << "Masukkan username: ";
            cin >> username;
            cout << "Masukkan password: ";
            cin >> password;
            users.push_back(User(username, password));
            sort(users.begin(), users.end());
            cout << "Pendaftaran berhasil!" << endl;
            getch();
            break;
        }
        case 2: { // Masuk
            system("cls");
            cout << "Masukkan username: ";
            cin >> username;
            cout << "Masukkan password: ";
            cin >> password;
            int userIndex = binarySearch(users, username, 0, users.size() - 1);
            if (userIndex != -1 && users[userIndex].checkPassword(password)) {
                loggedIn = true;
                cout << "Login berhasil!" << endl;
            } else {
                cout << "Username atau password salah." << endl;
            }
            getch();
            break;
        }
        case 3: { // Keluar
            system("cls");
            cout << "Keluar..." << endl;
            return 0;
        }
        default: {
            cout << "Pilihan tidak valid. Silakan coba lagi." << endl;
            getch();
        }
    }
}

    } while (choice != 3);

    return 0;
}
